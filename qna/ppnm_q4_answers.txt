------ Praktisk Programmering og Numeriske Metoder Answers ------

######################################################################################################################
# ------------------------------------------------------------------------------------------------------------------ #
# -------------------------------------------------- Questions 4 --------------------------------------------------- #
# ------------------------------------------------------------------------------------------------------------------ #
######################################################################################################################

Questions 4 "pointers"

- How are arguments passed to functions in C: by-value or by-reference? And what does that mean? Hint: C syntax → argument passing.

	¤ C uses the call by value evaluation strategy, which means arguments are copied when passed to, say, a function. This means that anything happening
	  within function scope doesn't change the value at the caller scope. This can be circumvented by usage of pointers, in which C can simulate call by
	  reference. In this case the memory address is passed to the function, such that the function may change the value of the argument by reference to 
	  what is actually stored within the original memory location. This requires dynamic memory allocation.

- If double x=1.23, what is *(&x)?

	¤ '&' means 'address of', and is the reference to x. In other words it is the address in which x is stored. It can be used to get the address of a
	  variable. '*' is the dereferencing operator, and loosely speaking means 'give me whatever is at the address of ...'. It is used to get the value 
	  that is stored at an address, hence it will yield the value a pointer is pointing to. Thus '*(&x)' is the same as 'x'

- What is NULL? Hint: null pointer.

	¤ NULL is the null pointer. It is commonly used to initiallize a pointer that has not yet been assigned a memory address. It can also be used to check
	  that a pointer is not the NULL pointer, or to pass a null pointer to a function when we don't want to pass any memory address. It is different from
	  a dangling or uninitiallized pointer in the sense that it is a valid pointer, in which context it is used for safety reasons. 

- What happens to variables declared inside a function when the function exits (returns)?

	¤ Statically declared variables will go out of scope and be deleted, while dynamically allocated memory will remain. 

- What is a static variable? Hint: static variable.
	
	¤ A static variable is one that is declared such as
	
		int foo = 10;
		
	  For static memory allocations the program will allocate memory on the 'stack'. This is very fast and efficient memory allocation. If two variables
	  are declared after one another, statically, they will be allocated in adjacent memory slots on the stack. Formally the stack is a preset block
	  of available memory reserved at the beginning of the program at runtime. It is in contrast to dynamically allocated memory, in which the program
	  will allocate memory, in a 'random' location on the 'heap'. The heap is loosely speaking the rest of the memory available to the program. Since
	  memory allocation on the heap is not necessarily next to each other, it is more inefficient and slower than stack allocation, since it is not
	  prereserved by the program at runtime. 

- What will the following three programs print out and why?

		    #include<stdio.h>
		    void f(int i){i=0;}
		    int main(){
		    	int i=1; f(i); printf("i=%i\n",i);
		    	return 0; }

		    #include<stdio.h>
		    void f(int* i){*i=0;}
		    int main(){
		    	int i=1; f(&i); printf("i=%i\n",i);
		    	return 0; }

		    #include<stdio.h>
		    void f(int* i){i=NULL;}
		    int main(){
		    	int i=1; f(&i); printf("i=%i\n",i);
		    	return 0; }

	¤ The first program will print out "i=1", since the void function will only, within function scope, be able to alter the value of i. This copy of i
	  will go out of scope and be deleted. The second program passes variables by reference to the function, so 'i', will be altered at it's memory 
	  location and the program prints "i=0". The last program changes the pointer to i to a NULL pointer, but this will not change the value of i.

If you pass an array to a function with the signature void f(double a[]) – what is actually passed to the function:

        - a copy of the whole array?
        - the pointer a to the first element of the array?
        - a copy of the pointer to the first element?
        - something else? 
    Hint: C syntax → argument passing → array parameters.
    
	¤ The pointer a to the first element of the array is what is passed, since this is what arrays are; they are simpy pointers to a memory location
	  that represents the first element, and the other elements then follow in adjacent memory locations. 

- When the function with the signature void f(double a[]) gets the array as parameter – can it figure out the size of the array?

	¤ No.

- If you declare an array as int a[5]; and then try a[999]=1; what will might happen? Hint: Segmentation fault / causes.

	¤ We'll try to index memory that does not belong to us, and the program will terminate in a segmentation fault.	
	
- If you declare an i) static, ii) variable-length, iii) dynamic array inside a function, can the function return it? 

	¤ Only the dynamically allocated array can be returned. 

######################################################################################################################
